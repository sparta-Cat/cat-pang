services:
  # Eureka 서버 정의
  eureka:
    build:
      context: ./eureka
    env_file:
      - ${EUREKA_ENV}
    ports:
      - ${EUREKA_PORT}:${EUREKA_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${EUREKA_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
  # Config 서버 정의
  config:
    build:
      context: ./config
    env_file:
      - ${CONFIG_ENV}
    ports:
      - ${CONFIG_PORT}:${CONFIG_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      eureka:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${CONFIG_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  # Gateway 서버 정의
  gateway:
    build:
      context: ./gateway
    env_file:
      - ${GATEWAY_ENV}
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${GATEWAY_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  # PostgresSQL 정의
  orderPostgres:
    image: postgres:13
    env_file:
      - ${ORDER_DB_ENV}
    ports:
      - ${ORDER_DB_OUTER_PORT}:${ORDER_DB_INNER_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/order/data  # 데이터 영속성을 위한 볼륨 설정
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${ORDER_POSTGRES_USER} -d ${ORDER_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Order 서버 정의
  order:
    build:
      context: ./order
    env_file:
      - docker_env_files/order_docker.env
    ports:
      - ${ORDER_PORT}:${ORDER_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      gateway:
        condition: service_healthy
      config:
        condition: service_healthy
      orderPostgres:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${ORDER_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  # PostgresSQL 정의
  userPostgres:
    image: postgres:13
    env_file:
      - ${USER_DB_ENV}
    ports:
      - ${USER_DB_OUTER_PORT}:${USER_DB_INNER_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/user/data  # 데이터 영속성을 위한 볼륨 설정
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_POSTGRES_USER} -d ${USER_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 15

  # User 서버 정의
  user:
    build:
      context: ./user
    env_file:
      - docker_env_files/user_docker.env
    ports:
      - ${USER_PORT}:${USER_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      gateway:
        condition: service_healthy
      config:
        condition: service_healthy
      userPostgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${USER_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 15
    restart: on-failure

  redis: # container name
    image: redis:latest
    env_file:
      - ${USER_REDIS_ENV}
    ports: # 바인딩할 포트:내부 포트
      - ${USER_REDIS_OUTER_PORT}:${USER_REDIS_INNER_PORT}
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes: # 마운트할 볼륨 설정
      - redis_data:/var/lib/redis/user/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf # 파일 경로 수정
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]  # redis-cli ping 명령어로 상태 확인
      interval: 30s  # 헬스 체크 간격
      timeout: 10s   # 응답 대기 시간
      retries: 5     # 실패 후 재시도 횟수
      start_period: 10s  # 컨테이너 시작 후 첫 헬스 체크까지 대기 시간
    restart: always

  # PostgresSQL 정의
  hubPostgres:
    image: postgres:13
    env_file:
      - ${HUB_DB_ENV}
    ports:
      - ${HUB_DB_OUTER_PORT}:${HUB_DB_INNER_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/hub/data  # 데이터 영속성을 위한 볼륨 설정
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${HUB_POSTGRES_HUB} -d ${HUB_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 15

  # Hub 서버 정의
  hub:
    build:
      context: ./hub
    env_file:
      - docker_env_files/hub_docker.env
    ports:
      - ${HUB_PORT}:${HUB_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      gateway:
        condition: service_healthy
      config:
        condition: service_healthy
      hubPostgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${HUB_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 15
    restart: on-failure
  
  # PostgresSQL 정의
  userPostgres:
    image: postgres:13
    env_file:
      - ${USER_DB_ENV}
    ports:
      - ${USER_DB_OUTER_PORT}:${USER_DB_INNER_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/user/data  # 데이터 영속성을 위한 볼륨 설정
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_POSTGRES_USER} -d ${USER_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 15

  # Hub_Product 서버 정의
  hub_product:
    build:
      context: ./hub_product
    env_file:
      - docker_env_files/hub_product_docker.env
    ports:
      - ${HUB_PRODUCT_PORT}:${HUB_PRODUCT_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      gateway:
        condition: service_healthy
      config:
        condition: service_healthy
      hub_productPostgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${HUB_PRODUCT_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 15
    restart: on-failure

  # PostgresSQL 정의
  userPostgres:
    image: postgres:13
    env_file:
      - ${USER_DB_ENV}
    ports:
      - ${USER_DB_OUTER_PORT}:${USER_DB_INNER_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/user/data  # 데이터 영속성을 위한 볼륨 설정
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_POSTGRES_USER} -d ${USER_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 15

  # Address 서버 정의
  address:
    build:
      context: ./address
    env_file:
      - docker_env_files/address_docker.env
    ports:
      - ${ADDRESS_PORT}:${ADDRESS_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      gateway:
        condition: service_healthy
      config:
        condition: service_healthy
      addressPostgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${ADDRESS_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 15
    restart: on-failure
  
  # PostgresSQL 정의
  userPostgres:
    image: postgres:13
    env_file:
      - ${USER_DB_ENV}
    ports:
      - ${USER_DB_OUTER_PORT}:${USER_DB_INNER_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/user/data  # 데이터 영속성을 위한 볼륨 설정
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_POSTGRES_USER} -d ${USER_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 15

  # Company 서버 정의
  company:
    build:
      context: ./company
    env_file:
      - docker_env_files/company_docker.env
    ports:
      - ${COMPANY_PORT}:${COMPANY_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      gateway:
        condition: service_healthy
      config:
        condition: service_healthy
      companyPostgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${COMPANY_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 15
    restart: on-failure
  
  # PostgresSQL 정의
  productPostgres:
    image: postgres:13
    env_file:
      - ${PRODUCT_DB_ENV}
    ports:
      - ${PRODUCT_DB_OUTER_PORT}:${PRODUCT_DB_INNER_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/product/data  # 데이터 영속성을 위한 볼륨 설정
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PRODUCT_POSTGRES_PRODUCT} -d ${PRODUCT_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 15

  # Product 서버 정의
  product:
    build:
      context: ./product
    env_file:
      - docker_env_files/product_docker.env
    ports:
      - ${PRODUCT_PORT}:${PRODUCT_PORT}  # 애플리케이션 포트 매핑 설정 (수정 가능)
    volumes:
      - ./app_data:/path/in/container  # 애플리케이션 데이터 볼륨 설정 (필요한 경우 경로 수정 가능)
    depends_on:
      gateway:
        condition: service_healthy
      config:
        condition: service_healthy
      productPostgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${EUREKA_OUT_DOMAIN}:${PRODUCT_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 15
    restart: on-failure

networks:
  my-microservices-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: